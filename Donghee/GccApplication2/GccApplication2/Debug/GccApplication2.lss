
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084a  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ad  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	99 c0       	rjmp	.+306    	; 0x1ce <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	64 97       	sbiw	r28, 0x14	; 20
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	int cntDwn[10];
	int i = 9;
	int input;
	//                  A B C D E F G dp
	cntDwn[0] = 0x03; //0 0 0 0 0 0 1 1
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	9a 83       	std	Y+2, r25	; 0x02
  b8:	89 83       	std	Y+1, r24	; 0x01
	cntDwn[1] = 0x9f; //1 0 0 1 1 1 1 1
  ba:	8f e9       	ldi	r24, 0x9F	; 159
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	9c 83       	std	Y+4, r25	; 0x04
  c0:	8b 83       	std	Y+3, r24	; 0x03
	cntDwn[2] = 0x25; //0 0 1 0 0 1 0 1
  c2:	85 e2       	ldi	r24, 0x25	; 37
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	9e 83       	std	Y+6, r25	; 0x06
  c8:	8d 83       	std	Y+5, r24	; 0x05
	cntDwn[3] = 0x0d; //0 0 0 0 1 1 0 1
  ca:	8d e0       	ldi	r24, 0x0D	; 13
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	98 87       	std	Y+8, r25	; 0x08
  d0:	8f 83       	std	Y+7, r24	; 0x07
	cntDwn[4] = 0x99; //1 0 0 1 1 0 0 1
  d2:	89 e9       	ldi	r24, 0x99	; 153
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	9a 87       	std	Y+10, r25	; 0x0a
  d8:	89 87       	std	Y+9, r24	; 0x09
	cntDwn[5] = 0x49; //0 1 0 0 1 0 0 1
  da:	89 e4       	ldi	r24, 0x49	; 73
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	9c 87       	std	Y+12, r25	; 0x0c
  e0:	8b 87       	std	Y+11, r24	; 0x0b
	cntDwn[6] = 0x41; //0 1 0 0 0 0 0 1
  e2:	81 e4       	ldi	r24, 0x41	; 65
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9e 87       	std	Y+14, r25	; 0x0e
  e8:	8d 87       	std	Y+13, r24	; 0x0d
	cntDwn[7] = 0x1b; //0 0 0 1 1 0 1 1
  ea:	8b e1       	ldi	r24, 0x1B	; 27
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	98 8b       	std	Y+16, r25	; 0x10
  f0:	8f 87       	std	Y+15, r24	; 0x0f
	cntDwn[8] = 0x01; //0 0 0 0 0 0 0 1
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9a 8b       	std	Y+18, r25	; 0x12
  f8:	89 8b       	std	Y+17, r24	; 0x11
	cntDwn[9] = 0x19; //0 0 0 1 1 0 0 1
  fa:	89 e1       	ldi	r24, 0x19	; 25
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	9c 8b       	std	Y+20, r25	; 0x14
 100:	8b 8b       	std	Y+19, r24	; 0x13

	DDRA = 0xff;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;
 106:	17 ba       	out	0x17, r1	; 23
 	
	PORTA = cntDwn[i]; 
 108:	8b 89       	ldd	r24, Y+19	; 0x13
 10a:	8b bb       	out	0x1b, r24	; 27
#include <util/delay.h>

int main(void)
{
	int cntDwn[10];
	int i = 9;
 10c:	29 e0       	ldi	r18, 0x09	; 9
 10e:	30 e0       	ldi	r19, 0x00	; 0
			i = (i + 1) % 10;
		}
		else if((PINB & 0x03) == 1)
		{
			PORTA = cntDwn[i--];
			i = (i >= 0)? i : 9;
 110:	19 e0       	ldi	r17, 0x09	; 9
 112:	40 e0       	ldi	r20, 0x00	; 0

		while ((PINB & 0x03) == 0x03);
		if((PINB & 0x03) == 2) //10
		{
			PORTA = cntDwn[i];
			i = (i + 1) % 10;
 114:	ea e0       	ldi	r30, 0x0A	; 10
 116:	f0 e0       	ldi	r31, 0x00	; 0
	PORTA = cntDwn[i]; 
	
    while (1) 
    {

		while ((PINB & 0x03) == 0x03);
 118:	96 b3       	in	r25, 0x16	; 22
 11a:	93 70       	andi	r25, 0x03	; 3
 11c:	93 30       	cpi	r25, 0x03	; 3
 11e:	e1 f3       	breq	.-8      	; 0x118 <main+0x7a>
		if((PINB & 0x03) == 2) //10
 120:	96 b3       	in	r25, 0x16	; 22
 122:	93 70       	andi	r25, 0x03	; 3
 124:	92 30       	cpi	r25, 0x02	; 2
 126:	89 f4       	brne	.+34     	; 0x14a <main+0xac>
		{
			PORTA = cntDwn[i];
 128:	d9 01       	movw	r26, r18
 12a:	aa 0f       	add	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	8c 0f       	add	r24, r28
 134:	9d 1f       	adc	r25, r29
 136:	a8 0f       	add	r26, r24
 138:	b9 1f       	adc	r27, r25
 13a:	8c 91       	ld	r24, X
 13c:	8b bb       	out	0x1b, r24	; 27
			i = (i + 1) % 10;
 13e:	c9 01       	movw	r24, r18
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	bf 01       	movw	r22, r30
 144:	1d d0       	rcall	.+58     	; 0x180 <__divmodhi4>
 146:	9c 01       	movw	r18, r24
 148:	16 c0       	rjmp	.+44     	; 0x176 <main+0xd8>
		}
		else if((PINB & 0x03) == 1)
 14a:	96 b3       	in	r25, 0x16	; 22
 14c:	93 70       	andi	r25, 0x03	; 3
 14e:	91 30       	cpi	r25, 0x01	; 1
 150:	91 f4       	brne	.+36     	; 0x176 <main+0xd8>
		{
			PORTA = cntDwn[i--];
 152:	c9 01       	movw	r24, r18
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	a1 e0       	ldi	r26, 0x01	; 1
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	ac 0f       	add	r26, r28
 160:	bd 1f       	adc	r27, r29
 162:	a2 0f       	add	r26, r18
 164:	b3 1f       	adc	r27, r19
 166:	2c 91       	ld	r18, X
 168:	2b bb       	out	0x1b, r18	; 27
			i = (i >= 0)? i : 9;
 16a:	99 23       	and	r25, r25
 16c:	14 f0       	brlt	.+4      	; 0x172 <main+0xd4>
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <main+0xd8>
 172:	21 2f       	mov	r18, r17
 174:	34 2f       	mov	r19, r20
		}
		while((PINB & 0x03) != 3);
 176:	96 b3       	in	r25, 0x16	; 22
 178:	93 70       	andi	r25, 0x03	; 3
 17a:	93 30       	cpi	r25, 0x03	; 3
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xd8>
 17e:	cc cf       	rjmp	.-104    	; 0x118 <main+0x7a>

00000180 <__divmodhi4>:
 180:	97 fb       	bst	r25, 7
 182:	07 2e       	mov	r0, r23
 184:	16 f4       	brtc	.+4      	; 0x18a <__divmodhi4+0xa>
 186:	00 94       	com	r0
 188:	06 d0       	rcall	.+12     	; 0x196 <__divmodhi4_neg1>
 18a:	77 fd       	sbrc	r23, 7
 18c:	08 d0       	rcall	.+16     	; 0x19e <__divmodhi4_neg2>
 18e:	0b d0       	rcall	.+22     	; 0x1a6 <__udivmodhi4>
 190:	07 fc       	sbrc	r0, 7
 192:	05 d0       	rcall	.+10     	; 0x19e <__divmodhi4_neg2>
 194:	3e f4       	brtc	.+14     	; 0x1a4 <__divmodhi4_exit>

00000196 <__divmodhi4_neg1>:
 196:	90 95       	com	r25
 198:	81 95       	neg	r24
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	08 95       	ret

0000019e <__divmodhi4_neg2>:
 19e:	70 95       	com	r23
 1a0:	61 95       	neg	r22
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255

000001a4 <__divmodhi4_exit>:
 1a4:	08 95       	ret

000001a6 <__udivmodhi4>:
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	51 e1       	ldi	r21, 0x11	; 17
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <__udivmodhi4_ep>

000001ae <__udivmodhi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	a6 17       	cp	r26, r22
 1b4:	b7 07       	cpc	r27, r23
 1b6:	10 f0       	brcs	.+4      	; 0x1bc <__udivmodhi4_ep>
 1b8:	a6 1b       	sub	r26, r22
 1ba:	b7 0b       	sbc	r27, r23

000001bc <__udivmodhi4_ep>:
 1bc:	88 1f       	adc	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	5a 95       	dec	r21
 1c2:	a9 f7       	brne	.-22     	; 0x1ae <__udivmodhi4_loop>
 1c4:	80 95       	com	r24
 1c6:	90 95       	com	r25
 1c8:	bc 01       	movw	r22, r24
 1ca:	cd 01       	movw	r24, r26
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
